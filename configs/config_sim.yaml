mode: sim
run_id: default-run
logs_dir: logs
artifacts_dir: artifacts
seasonality_log_level: INFO
execution_profile: MKT_OPEN_NEXT_H1
execution_params:
  slippage_bps: 0.0
  limit_offset_bps: 0.0  # e.g. 25 for 0.25% offset when using LIMIT_MID_BPS
  ttl_steps: 0           # e.g. 5 to cancel after 5 simulation steps
  tif: GTC               # e.g. IOC or FOK

# Optional path to 168 hourly liquidity multipliers (indexed by UTC hour-of-week;
# values clamped to [0.1, 10.0])
liquidity_seasonality_path: "configs/liquidity_latency_seasonality.json"
# Optional SHA256 hash of the above liquidity multipliers for integrity checking
liquidity_seasonality_hash: null
# Optional path to 168 hourly liquidity overrides multiplied with the above multipliers
liquidity_seasonality_override_path: null
# Optional path to 168 hourly latency multipliers (indexed by UTC hour-of-week;
# values clamped to [0.1, 10.0])
latency_seasonality_path: "configs/liquidity_latency_seasonality.json"
# Set false to ignore liquidity and latency multipliers
use_seasonality: true

market: spot
spot_symbols: ["BTCUSDT"]
futures_symbols: ["BTCUSDT"]

data:
  symbols: ["BTCUSDT"]
  timeframe: "1m"

model:
  algo: "ppo"
  params: {}

quantizer:
  path: "binance_filters.json"
  strict: true
  enforce_percent_price_by_side: true

fees:
  maker_bps: 1.0
  taker_bps: 5.0
  use_bnb_discount: false
  maker_discount_mult: 1.0
  taker_discount_mult: 1.0

slippage:
  k: 0.8
  min_half_spread_bps: 0.0
  default_spread_bps: 2.0
  eps: 1e-12

latency:
  base_ms: 250
  jitter_ms: 50
  spike_p: 0.01
  spike_mult: 5.0
  timeout_ms: 2500
  retries: 1
  seed: 0  # RNG seed; seasonality multipliers do not affect RNG state

risk:
  enabled: true
  max_abs_position_qty: 0.0
  max_abs_position_notional: 0.0
  max_order_notional: 0.0
  max_orders_per_min: 60
  max_orders_window_s: 60
  daily_loss_limit: 0.0
  pause_seconds_on_violation: 300
  daily_reset_utc_hour: 0

# See ../docs/no_trade.md for details
no_trade:
  funding_buffer_min: 0
  daily_utc: []
  custom_ms: []

components:
  market_data:
    target: impl_offline_data:OfflineCSVBarSource
    params:
      paths: ["data/sample.csv"]
      timeframe: "1m"
  executor:
    target: impl_sim_executor:SimExecutor
    params:
      symbol: "BTCUSDT"
  feature_pipe:
    target: feature_pipe:FeaturePipe
    params: {}
  policy:
    target: strategies.momentum:MomentumStrategy
    params: {}
  risk_guards:
    target: impl_risk_basic:RiskBasicImpl
    params: {}
  backtest_engine:
    target: service_backtest:ServiceBacktest
    params: {}
