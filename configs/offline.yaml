rest_budget:
  # Global rate limiter applied to every request unless overridden below.
  limits:
    global:
      qps: 8            # Target requests per second across all endpoints.
      burst: 16         # Maximum burst size before throttling kicks in.
      jitter_ms: 50     # Randomised jitter added before sleeps to avoid sync.
      cooldown_sec: 5   # Optional cooldown when the global bucket is exhausted.
    endpoints:
      # Endpoint specific overrides inherit from the global limiter.
      klines:
        qps: 5
        burst: 10
      exchangeInfo:
        qps: 0.1
        burst: 1
        min_refresh_days: 1  # Minimum age before forcing a refresh when cached.
  cache:
    path: "cache/http"         # Directory where REST responses are cached.
    ttl_days: 7                 # Expiration window for cached responses.
    mode: "read_write"          # Set to read or off to disable storing new entries.
  checkpoint:
    enabled: true               # Toggle on-disk progress checkpoints between runs.
    path: "state/offline_checkpoint.json"
  concurrency:
    workers: 4                  # Number of worker threads dispatching HTTP requests.
    batch_size: 500             # Max in-flight futures per producer before blocking.
  shuffle:
    enabled: true               # Shuffle symbol order to spread load across runs.
  dynamic_from_headers: false   # Respect Binance weight headers when available.

datasets:
  train:
    version: "v2023.12-train"
    start: "2022-01-01T00:00:00Z"
    end: "2023-06-30T23:59:59Z"
    seasonality:
      input:
        start: "2021-12-01T00:00:00Z"
        end: "2023-06-30T23:59:59Z"
      output_path: "data/latency/liquidity_latency_seasonality_train.json"
      verification_hash: "sha256:c65e110a637b969320af9c8fb56e635bb0241654ab71aac4f5ee9fbf99dd19d8"
    adv:
      input:
        start: "2022-01-01T00:00:00Z"
        end: "2023-06-30T23:59:59Z"
      output_path: "data/adv/train.parquet"
      verification_hash: "sha256:0d31b96da5012582e4dee88ab1308a531225bf929b70c5edc1dd05b9be6c8b40"
    fees:
      input:
        start: "2022-01-01T00:00:00Z"
        end: "2023-06-30T23:59:59Z"
      output_path: "data/fees/train_fees.json"
      verification_hash: "sha256:180676bb19383095d3ec84389c4ed8c7508be4b1a6b7179dd89b9590d5a32df0"
  val:
    version: "v2023.12-val"
    start: "2023-07-01T00:00:00Z"
    end: "2023-09-30T23:59:59Z"
    seasonality:
      input:
        start: "2023-03-01T00:00:00Z"
        end: "2023-09-30T23:59:59Z"
      output_path: "data/latency/liquidity_latency_seasonality_val.json"
      verification_hash: "sha256:05c2712cf030b664f90ad23d98a505d8a41942045f6141442d4c0c2c006a3c0c"
    adv:
      input:
        start: "2023-07-01T00:00:00Z"
        end: "2023-09-30T23:59:59Z"
      output_path: "data/adv/val.parquet"
      verification_hash: "sha256:30e7f92ae9c95ed975ec575dd17edeb11d51e8d0c0bdae6e22a453fe67ceadb3"
    fees:
      input:
        start: "2023-07-01T00:00:00Z"
        end: "2023-09-30T23:59:59Z"
      output_path: "data/fees/val_fees.json"
      verification_hash: "sha256:66a85a10d108cac103f843762366fe7544a85b2d5d8ad9de4b9e9c6a6d1b555c"
  test:
    version: "v2023.12-test"
    start: "2023-10-01T00:00:00Z"
    end: "2023-12-31T23:59:59Z"
    seasonality:
      input:
        start: "2023-06-01T00:00:00Z"
        end: "2023-12-31T23:59:59Z"
      output_path: "data/latency/liquidity_latency_seasonality_test.json"
      verification_hash: "sha256:bc7aafe50ca5dc104c1bccee22d73b318b6536c565c7dc0db146ba620d0f5f7a"
    adv:
      input:
        start: "2023-10-01T00:00:00Z"
        end: "2023-12-31T23:59:59Z"
      output_path: "data/adv/test.parquet"
      verification_hash: "sha256:42ef42f8d5817f8ee8113cf6e11e4f8e60d13e37f6b45e64b796e884621df9d5"
    fees:
      input:
        start: "2023-10-01T00:00:00Z"
        end: "2023-12-31T23:59:59Z"
      output_path: "data/fees/test_fees.json"
      verification_hash: "sha256:a928048704211e015c7d86cf3ddf0be900ef8a1d275096f86b4caa667f8bc65b"
